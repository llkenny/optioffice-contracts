openapi: 3.1.0
info:
  title: OptiOffice API
  version: 0.1.0
servers:
  - url: https://api.optioffice.local/v1
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    Organization:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
      required: [id, name]
    OfficeSpace:
      type: object
      properties:
        id:
          type: string
        organizationId:
          type: string
        title:
          type: string
        description:
          type: string
      required: [id, organizationId, title]
    Listing:
      type: object
      properties:
        id:
          type: string
        officeSpaceId:
          type: string
        price:
          type: number
        status:
          type: string
          enum: [draft, published]
      required: [id, officeSpaceId, price, status]
    Payment:
      type: object
      properties:
        id:
          type: string
        organizationId:
          type: string
        amount:
          type: number
        currency:
          type: string
        description:
          type: string
      required: [id, organizationId, amount, currency]
    Document:
      type: object
      properties:
        id:
          type: string
        organizationId:
          type: string
        name:
          type: string
        url:
          type: string
      required: [id, organizationId, name, url]
    Contact:
      type: object
      properties:
        id:
          type: string
        organizationId:
          type: string
        name:
          type: string
        email:
          type: string
        phone:
          type: string
      required: [id, organizationId, name]
    Lead:
      type: object
      properties:
        id:
          type: string
        contactId:
          type: string
        channel:
          type: string
        status:
          type: string
          enum: [new, in_progress, closed]
      required: [id, contactId, channel, status]
security:
  - bearerAuth: []
paths:
  /auth/register:
    post:
      summary: Register new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
              required: [email, password]
      responses:
        '201':
          description: Created
  /auth/login:
    post:
      summary: Login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
              required: [email, password]
      responses:
        '200':
          description: Tokens
          content:
            application/json:
              schema:
                type: object
                properties:
                  accessToken:
                    type: string
                  refreshToken:
                    type: string
                required: [accessToken, refreshToken]
  /auth/refresh:
    post:
      summary: Refresh token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                refreshToken:
                  type: string
              required: [refreshToken]
      responses:
        '200':
          description: New access token
          content:
            application/json:
              schema:
                type: object
                properties:
                  accessToken:
                    type: string
                required: [accessToken]
  /orgs:
    get:
      summary: List organizations
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Organization'
    post:
      summary: Create organization
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Organization'
      responses:
        '201':
          description: Created
  /orgs/{orgId}/spaces:
    get:
      summary: List office spaces
      parameters:
        - name: orgId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/OfficeSpace'
    post:
      summary: Create office space
      parameters:
        - name: orgId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OfficeSpace'
      responses:
        '201':
          description: Created
  /orgs/{orgId}/spaces/{spaceId}/listings:
    get:
      summary: List listings
      parameters:
        - in: path
          name: orgId
          required: true
          schema:
            type: string
        - in: path
          name: spaceId
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Listing'
    post:
      summary: Create listing
      parameters:
        - in: path
          name: orgId
          required: true
          schema:
            type: string
        - in: path
          name: spaceId
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Listing'
      responses:
        '201':
          description: Created
  /orgs/{orgId}/listings/{listingId}/publish:
    post:
      summary: Publish listing
      parameters:
        - in: path
          name: orgId
          required: true
          schema:
            type: string
        - in: path
          name: listingId
          required: true
          schema:
            type: string
      responses:
        '202':
          description: Accepted
  /orgs/{orgId}/payments:
    get:
      summary: List payments
      parameters:
        - name: orgId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Payment'
    post:
      summary: Create payment
      parameters:
        - name: orgId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Payment'
      responses:
        '201':
          description: Created
  /orgs/{orgId}/documents:
    get:
      summary: List documents
      parameters:
        - name: orgId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Document'
    post:
      summary: Upload document
      parameters:
        - name: orgId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
                name:
                  type: string
      responses:
        '201':
          description: Created
  /orgs/{orgId}/leads:
    get:
      summary: List leads
      parameters:
        - name: orgId
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Lead'
  /webhooks/avito:
    post:
      summary: Avito webhook endpoint
      responses:
        '202':
          description: Accepted
